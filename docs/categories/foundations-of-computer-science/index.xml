<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Foundations of Computer Science on Superdanby</title>
    <link>https://superdanby.github.io/Blog/categories/foundations-of-computer-science.html</link>
    <description>Recent content in Foundations of Computer Science on Superdanby</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Dec 2018 21:55:00 +0800</lastBuildDate>
    
	<atom:link href="https://superdanby.github.io/Blog/categories/foundations-of-computer-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Foundations of Computer Science</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science.html</link>
      <pubDate>Mon, 10 Dec 2018 21:55:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science.html</guid>
      <description>The series contains the essential materials of the foundations of coumputer science. The original purpose is to mentor my close friend who has decided to march in the world of Computer Science. However, anyone is welcomed to read the contents and give feedback. :)
Hackmd file</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; Programming Overview</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/c-and-c&#43;&#43;-programming-overview.html</link>
      <pubDate>Mon, 10 Dec 2018 20:00:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/c-and-c&#43;&#43;-programming-overview.html</guid>
      <description>Basic types  data register int, float, char, long long, double, short C++ exclusive: bool  int i = 0; int a = b;  Array 1 2 3 4 5 6  char carray[23]; // char carray2[4] = a; long long po [8]; po[0] = 1; po[7] = po[0]; // po[8];    Pointers and Reference  address register *, &amp;amp;  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  int a = 10, b = 1; int* aptr = NULL; // double * dptr = &amp;amp;a; aptr = &amp;amp;a; // aptr -&amp;gt; a, a = 10, b = 1 *aptr = b; // aptr -&amp;gt; a, a = 1, b = 1 a = 2; // aptr -&amp;gt; a, a = 2, b = 1 b = 7; // aptr -&amp;gt; a, a = 2, b = 7 &amp;amp;a = b; // aptr -&amp;gt; old a, old a = 2, b(a) = 7; printf(&amp;#34;%d %d&amp;#34;, a, *aptr); // 7 2  int * potato = NULL; if(potato == NULL) printf(&amp;#34;hi&amp;#34;); potato = (int *)malloc(sizeof(int) * 127); if(potato == NULL) printf(&amp;#34;Memory allocation failed.</description>
    </item>
    
    <item>
      <title>Computer Organization</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/computer-organization.html</link>
      <pubDate>Sun, 09 Dec 2018 22:00:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/computer-organization.html</guid>
      <description>CPU  Control Unit  A logic circuit that controls the CPU in respond of the given instructions.  Arithmetic Logic Unit  logic operations, shift operations, arithmetic operations  Registers(basic C programming knowledge required)  word size: 64 bits vs 32 bits User accessible:  General purpose register: stores data or addresses Data register: stores data Address register: stores address Stack pointer: address of the top of the current program stack Base pointer: address of the starting position of the current stack frame Program counter: address of the next instruction Constant register: e.</description>
    </item>
    
    <item>
      <title>Data Operations</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/data-operations.html</link>
      <pubDate>Wed, 05 Dec 2018 12:00:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/data-operations.html</guid>
      <description>Logic Operations  Example: 23, 11  Shift Operations  Example: 15, -15  Questions  Let X and Y be 39 and 127 respectively. Both are 8-bit unsigned numbers.  Apply 1-bit logical/arithmetic left/right shift on X and Y. Show the process in binary format. Apply NOT, AND, NAND, OR, NOR, XOR, and XNOR on X and Y. Show the process in binary format.  Show the results of problem 1.</description>
    </item>
    
    <item>
      <title>Data Representation</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/data-representation.html</link>
      <pubDate>Mon, 03 Dec 2018 11:30:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/data-representation.html</guid>
      <description>Data Representation Units  bit, byte, kilobytes, megabytes, gigabytes, terabytes, petabytes 1000 base, MB 1024 base, MiB b vs B  Numerical Encoding  Excess 3 BCD  Exercise: base 10, 9&amp;rsquo;s complement vs 10&amp;rsquo;s complement  Integers(fixed point)  2&amp;rsquo;s complement: mainly used 1&amp;rsquo;s complement: postive &amp;amp; negative 0 Sign and magnitude Gray code  Benefit: filp 1 bit at a time, has a good pattern   Floating point  Sign and magnitude Float(32bits, 1 + 8 + 23), excess-127 Double(64bits, 1 + 11 + 48)   Overflow &amp;amp; Underflow Conversion  10110.</description>
    </item>
    
    <item>
      <title>Computer Hardware</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/computer-hardware.html</link>
      <pubDate>Thu, 29 Nov 2018 22:30:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/computer-hardware.html</guid>
      <description>CPU  CU ALU Data registers I/O  Architecture: x86, x86-64, ARM, RISC-V, MIPS Vendors: Intel, AMD, Apple  Storage  Register Cache  L1 ~ L3 Motivation: Fetching data from main memory takes a lot of time.  (Main) memory = RAM  What is RAM Volatile  SRAM  Fast  DRAM  Slow  SDRAM  DDR1 ~ DDR4  Speed: 2133, 2400, 1600MHz  Non-volatile(NVRAM)  Flash   Massive Storage</description>
    </item>
    
    <item>
      <title>Basic Computation Models</title>
      <link>https://superdanby.github.io/Blog/foundations-of-computer-science/basic-computation-models.html</link>
      <pubDate>Thu, 29 Nov 2018 21:00:00 +0800</pubDate>
      
      <guid>https://superdanby.github.io/Blog/foundations-of-computer-science/basic-computation-models.html</guid>
      <description>Turing Machine  A machine operates on a infinite tape. On this tape are symbols, which the machine can read and write, one at a time, using a tape head. Operation is fully determined by a finite set of elementary instructions. Despite the model&amp;rsquo;s simplicity, given any computer algorithm, a Turing machine capable of simulating that algorithm&amp;rsquo;s logic can be constructed.(Incredibly powerful)      same program different program     same data remains the same click   different data click -    Universal Turing Machine A Universal Turing Machine can simulate any arbitrary Turing machine on arbitrary input.</description>
    </item>
    
  </channel>
</rss>